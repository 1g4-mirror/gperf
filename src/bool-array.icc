/* Inline Functions for bool-array.{h,cc}.

   Copyright (C) 1989-1998, 2002 Free Software Foundation, Inc.
   written by Douglas C. Schmidt (schmidt@ics.uci.edu)

This file is part of GNU GPERF.

GNU GPERF is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 1, or (at your option)
any later version.

GNU GPERF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU GPERF; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */

// This needs:
//#include <stdio.h>
//#include <string.h>
//#include "options.h"

/* Initializes the bit array with room for s bits, numbered from 0 to s-1. */
INLINE
Bool_Array::Bool_Array (unsigned int s)
  : size (s), iteration_number (1), storage_array (new unsigned int [s])
{
  memset (storage_array, 0, s * sizeof (unsigned int));
  if (option[DEBUG])
    fprintf (stderr, "\nbool array size = %d, total bytes = %d\n",
             size, (unsigned int) (size * sizeof (*storage_array)));
}

/* Sets the specified bit to one.  Returns its previous value (0 or 1).  */
INLINE int
Bool_Array::set_bit (unsigned int index)
{
  if (storage_array[index] == iteration_number)
    /* The bit was set since the last clear() call.  */
    return 1;
  else
    {
      /* The last operation on this bit was clear().  Set it now.  */
      storage_array[index] = iteration_number;
      return 0;
    }
}

/* Resets all bits to zero.  */
INLINE void
Bool_Array::clear (void)
{
  /* If we wrap around it's time to zero things out again!  However, this only
     occurs once about every 2^32 iterations, so it will not happen more
     frequently than once per second.  */

  if (++iteration_number == 0)
    {
      iteration_number = 1;
      memset (storage_array, 0, size * sizeof (unsigned int));
      if (option[DEBUG])
        {
          fprintf (stderr, "(re-initialized bool_array)\n");
          fflush (stderr);
        }
    }
}
