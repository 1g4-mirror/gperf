/* C code produced by gperf version 2.7.2 */
/* Command-line: ../src/gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k'1,3,$'  */

/* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ objc.gperf  */ 
struct resword { char *name; short token; enum rid rid; };

#define TOTAL_KEYWORDS 59
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 15
#define MIN_HASH_VALUE 8
#define MAX_HASH_VALUE 95
/* maximum key range = 88, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
hash (str, len)
     register const char *str;
     register unsigned int len;
{
  static unsigned char asso_values[] =
    {
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 19, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96,  2, 96,  2,  1, 10,
      26,  1, 23, 27, 27, 24, 96,  1, 25, 36,
      10, 34, 23, 96, 10,  6,  8, 11, 41,  2,
      96, 96, 23, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
      96, 96, 96, 96, 96, 96
    };
  register int hval = len;

  switch (hval)
    {
      default:
      case 3:
        hval += asso_values[(unsigned char)str[2]];
      case 2:
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval + asso_values[(unsigned char)str[len - 1]];
}

#ifdef __GNUC__
__inline
#endif
struct resword *
is_reserved_word (str, len)
     register const char *str;
     register unsigned int len;
{
  static struct resword wordlist[] =
    {
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"break", BREAK, NORID},
      {""}, {""}, {""},
      {"else", ELSE, NORID},
      {"__asm__", ASM, NORID},
      {""}, {""},
      {"__attribute", ATTRIBUTE, NORID},
      {"__alignof__", ALIGNOF, NORID},
      {"__extension__", EXTENSION, NORID},
      {"__attribute__", ATTRIBUTE, NORID},
      {"__signed__", TYPESPEC, RID_SIGNED},
      {"case", CASE, NORID},
      {"__typeof__", TYPEOF, NORID},
      {"__const__", TYPE_QUAL, RID_CONST},
      {"static", SCSPEC, RID_STATIC},
      {"extern", SCSPEC, RID_EXTERN},
      {"char", TYPESPEC, RID_CHAR},
      {"__const", TYPE_QUAL, RID_CONST},
      {""},
      {"continue", CONTINUE, NORID},
      {"struct", STRUCT, NORID},
      {"@defs", DEFS, NORID},
      {"while", WHILE, NORID},
      {"const", TYPE_QUAL, RID_CONST},
      {"return", RETURN, NORID},
      {"__inline", SCSPEC, RID_INLINE},
      {"__alignof", ALIGNOF, NORID},
      {"@encode", ENCODE, NORID},
      {"__inline__", SCSPEC, RID_INLINE},
      {"@selector", SELECTOR, NORID},
      {"@interface", INTERFACE, NORID},
      {"__typeof", TYPEOF, NORID},
      {"__signed", TYPESPEC, RID_SIGNED},
      {"int", TYPESPEC, RID_INT},
      {"double", TYPESPEC, RID_DOUBLE},
      {"__asm", ASM, NORID},
      {"for", FOR, NORID},
      {"@public", PUBLIC, NORID},
      {"auto", SCSPEC, RID_AUTO},
      {"if", IF, NORID},
      {"union", UNION, NORID},
      {"unsigned", TYPESPEC, RID_UNSIGNED},
      {"enum", ENUM, NORID},
      {"short", TYPESPEC, RID_SHORT},
      {"__volatile", TYPE_QUAL, RID_VOLATILE},
      {"register", SCSPEC, RID_REGISTER},
      {"inline", SCSPEC, RID_INLINE},
      {"__volatile__", TYPE_QUAL, RID_VOLATILE},
      {"sizeof", SIZEOF, NORID},
      {"@end", END, NORID},
      {"typeof", TYPEOF, NORID},
      {"typedef", SCSPEC, RID_TYPEDEF},
      {"do", DO, NORID},
      {"switch", SWITCH, NORID},
      {"default", DEFAULT, NORID},
      {"signed", TYPESPEC, RID_SIGNED},
      {"long", TYPESPEC, RID_LONG},
      {""}, {""}, {""},
      {"float", TYPESPEC, RID_FLOAT},
      {""}, {""},
      {"goto", GOTO, NORID},
      {""},
      {"volatile", TYPE_QUAL, RID_VOLATILE},
      {""},
      {"asm", ASM, NORID},
      {""}, {""},
      {"@implementation", IMPLEMENTATION, NORID},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {""}, {""}, {""}, {""}, {""},
      {"void", TYPESPEC, RID_VOID}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register const char *s = wordlist[key].name;

          if (*str == *s && !strcmp (str + 1, s + 1))
            return &wordlist[key];
        }
    }
  return 0;
}
